
<<리눅스 가상 머신 생성 및 GIT 저장소 복제하기>>

0. vagrant init 

config.vm.box = "centos/7"	: 클라우드에서 가져올 box 이름 지정하기 	----- 이거 때문인가..??
vagrant box list : Vagrant에 설치된 박스 목록 보기
vagrant box add "centos/7" : vagrant에 박스 추가
vagrant box remove "박스이름" : vagrant에 등록된 박스 제거

1. vagrant up
2. vagrant ssh
3. mkdir git	cd git
---------------------------------------------
5. sudo yum install git -y
6. git clone https://github.com/eomjinyoung/bitcamp-study
7. ls - 파일 목록 확인, pwd - 현재 디렉토리 경로

-----------------------------------------------------

vagrant global-status : 생성된 VM의 상태 체크
vagrant detroy "id" : 현재 dir 위치 상관없이 VM 삭제

git config --system
git config --global  --전체 repo. 접근 name, email 

git help config = git config --help 같은 명령

git init : git 저장소로 지정		다른 방에서 헤메지 마라 ㅡㅡ

cd : 홈 디렉토리로 이동

sudo yum install tree : 하위 폴더 구조 보여줌

ls -a : 히든 파일까지 다 보여줌 (  .으로 시작하는 파일 : 숨김파일)
ls -al : 보기좋게 세로로 보여줌

.gitignore : 깃 저장소에 보관하지 않을 대상을 지정 / 도구를 실행할 때마다 자동 생성하는 파일
	ex) .class .exe bin build 등	-->  ignore 명단 만들어주는 사이트 : gitignore.io 
vi .gitignore : ignore 명단 작성
cat .gitignore : 파일 내용 출력
sudo yum install nano -y : nano 입력기 설치
nano .gitignore : nano 입력기로 작성 -->  ignore 명단 만들어주는 사이트 : gitignore.io 복붙 
nano a.txt : a라는 텍스트 생성
git status : 작업 파일의 상태 (Modified or 새로 생성된)
git status --short : main track에 기록된 적이 없는 파일
	앞(스테이징 영역)/뒤(워킹 디렉토리)
	A(Added),M(Modified),?(새로운 파일),_ 각각 의미

certutil -hashfile 파일명 계산법(hash 알고리즘 ex)MD4,MD5,SHA-1,SHA-256,SHA-512) 
--> hash value 출력 후 받은 파일과 원본 파일의 hash value 비교 : 데이터 식별자/디지털 지문

git log : git 저장소 변경이력 조회
git log -p -갯수 : 최신순 조회 갯수
git log --oneline : 해시코드 짧게 요약 (commit -m "최대한 디테일하게 변경내용 작성")
git log --oneline --graph --all : 실질적으로 가장 많이 쓰게 됨


git remote add origin https://github.com/letsgojonny/bitcamp-ncp
git remote show origin
git pull origin main

git config --global push.default simple
git push --set-upstream origin main
git branch 
git branch -m main

git config --global user.name
git config --global user.email


-----------------------------------------------------------

<<<로컬 git 저장소를 만들고 github.com의 개인 저장소와 연결하라>>>


작업내용 : host1 리눅스 VM에서 작업을 수행한다.

1. 다음의 경로에 로컬 깃 저장소를 생성한다.

	~/git/bitcamp-ncp2/

2. 다음의 테스트 파일을 생성하고 로컬 저장소에 커밋한다.

	~/git/bitcamp-ncp2/a.txt

	a.txt 파일의 내용을 아무거나 입력한다.

3. github.com의 개인 계정에 bitcamp-ncp2 이름으로 저장소를 생성한다. 

4. 로컬 깃 저장소와 원격 깃 저장소를 연결한다. 

5. 로컬 깃 저장소의 내용을 원격 저장소에 push 한다. 

6. 과제 완료 후 github url 제출








