
- 아래쪽으로 갈수록 우선순위 높게 배치 : 유지보수 편안

- Content-box : 기본설정-컨텐트의 너비/높이+박스 설정
- Border-box : 박스 전체의 너비/높이
- float활용
- span 컨텐츠에 아무 영향x (inline 타입)
	- 컨텐츠 묶어서 css 적용할 용도, 줄바꿈 x
- div 컨텐츠에 영향 x : span과 마찬가지 (block 타입)
- background 써서 text 뒤에 숨김(?) ex) 네이버 검색 로고 

- 폰트 크기는 상대적으로 지정
ex)	font-size: ~~px (노노) 
	font-size: 1.5em (상속받은 사이즈와 상대적으로 비교/유지보수 용이)

- min-height: 100px; 최소 높이 부여 (콘텐츠 없어도), 많이씀


폰트크기 = 높이
폰트가 있어야 글자 출력 가능,,
폰트이름 중간에 공백 있을 때 '맑은 고딕' / ''로 묶어줌



Raster 폰트 --> 픽셀 단위로 글자를 만든다
(Bitmap 폰트)	출력 속도가 빠르다
		폰트 크기에 따라 각 문자를 만든다
		@정해진 크기보다 더 크게 출력하면 단순히 각 픽셀의 크기를 
		늘리기 때문에 계단 현상 발생
		ex) courier
		이미지의 복잡도와 상관없이 파일크기(해상도)는 같다.
		ex) 비트맵 이미지 : .bmp, .gif, .png, .jpg

Vector 폰트 --> 글자를 그리는 명령어를 작성한다
		글자를 그리는 명령을 수행/출력 속도 느림(요즘은 cpu 빨라서 
		상관없음)
		글자 크기를 늘리더라도 명령을 통해 그리기 때문에 계단현상이
		발생하지 않는다.
		ex) True-Type 폰트 / courier new		
		이미지 단순 --> 파일크기 작음
		이미지 복잡 --> 파일크기 큼
		ex) 벡터이미지 ex)클립아트, 캐드

