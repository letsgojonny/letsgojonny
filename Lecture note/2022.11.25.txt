
-- Book List --
1. 모두의 네트워크


IP Group : Subnet 이라함
ex) 172.0.4.0 / 24 --> 각 8비트 total 32비트 / 24 --> 3번째 자리까지
		    172.0.4.그룹에 connection 
		    172.0.4.1~255 까지 (256 개의 IP)
		    2^(32-24)=256

- TCP : 연결 지향 프로토콜 (Three-way handshake)
	- 통신에 앞서 연결을 요구
	- 패킷 전달 보장, 신뢰할 수 있음
	- HTTP/1, HTTP/2 
	- 데이터 송수신 시 확인 
	- 전송속도 느림
	- 주문 순서대로
	<<connection oriented>>
	- Stateful : 한 번 연결한 후 연결을 끊을 떄까지 여러번 통신
		   적은 수의 client에 대응
	- Stateless : 한번 연결에 한번 통신, 매번 연결
		    많은 수의 client에 대응
	- multi-thread : 고객응대 점원 늘림


- UDP : 연결이 없는 프로토콜 (Fire-and-forget)
	- 연결 여부 확인하지 않고 송수신
	- 패킷 전달 보장하지 않음, 신뢰 x
	- HTTP/3 	
	- 승인 기다리지 않고 데이터 보냄
	- 전송속도 빠름
	- 주문 순서 상관x

<<URI = URL and URN>>
- URL 자리에 URI 들어올 수 있음
- URN 자리에 URI 들어올 수 있음
- URL <--> URN 불가능

--------------------------------------------------------------------------------
<<Text vs Binary>>
1. text : 일반 텍스트 편집기로 편집 가능한 포맷
	ex) .txt / .rtf / html

2. binary : 전용 에디터로 편집, byte 단위 포맷 / 일반 텍스트로 편집불가 / 전용 app 사용
	ex) .jpg / .mp3 / .gif / .png / .avi

## 저장할 때의 의도 숫자or문자or색상 : 2진수에는 그런 정보가 안 담겨있음
	--> 똑같은 값을 읽더라도 어떻게 읽느냐에 따라 결과 다름
	--> ex) mp3 --> txt 로 읽으면 되겠누 / 열리는데요?? 어쩌라고..; 니 잘못 
					--> 건들면 포맷(규칙) 깨짐, 복구 불가
	
한계)) 	1. 바이너리 데이터를 텍스트로 인코딩 하면 가능!
	2. URI 크기의 제한 때문에 대용량 데이터는 보낼 수 없다	ex) 아파치 약 8k까지 가능,,
	3. URL --> 브라우저 캐시에 보관 : 보안이 안됨,,
	-- Get 요청 관련 공부,,

<<Get, Post 요청 특징 (text와 binary의 관점에서 차이 발생>>

- Get : www.~~.~~/?~~~ 방식	쿼리 스트링



- Post : 	binary 데이터 전송가능	
	
--------------------------------------------------------------------------------

css 폴더 만들어서 문법 주석으로 막고 풀고 
그 용도 확인 
167~291p	319~354p

